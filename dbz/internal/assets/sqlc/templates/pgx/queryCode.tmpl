{{define "queryCodePgx"}}

import (
    "errors"
	"fmt"

	"github.com/jackc/pgx/v5"

	"github.com/ibrt/golang-utils/errorz"
	"github.com/ibrt/golang-utils/vldz"
	"github.com/ibrt/golang-modules/logm"
	"github.com/ibrt/golang-modules/pgm"
)

var (
	_ context.Context
)

{{range .GoQueries}}
{{if $.OutputQuery .SourceName}}
{{if and (ne .Cmd ":copyfrom") (ne (hasPrefix .Cmd ":batch") true)}}
const {{.ConstantName}} = {{$.Q}}-- name: {{.MethodName}} {{.Cmd}}
{{escape .SQL}}
{{$.Q}}
{{end}}

{{if ne (hasPrefix .Cmd ":batch") true}}
{{if .Arg.EmitStruct}}
type {{.Arg.Type}} struct { {{- range .Arg.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}

{{if .Ret.EmitStruct}}
type {{.Ret.Type}} struct { {{- range .Ret.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}

type {{.Ret.Type}}Scanner struct {
	rows pgx.Rows
}

func (s *{{.Ret.Type}}Scanner) Close() {
	s.rows.Close()
}

func (s *{{.Ret.Type}}Scanner) Next() (*{{.Ret.Type}}, error) {
	if !s.rows.Next() {
		if err := s.rows.Err(); err != nil {
			return nil, errorz.Wrap(err)
		}
		return nil, nil
	}

	var v {{.Ret.Type}}

    err := s.rows.Scan( {{- range .Ret.Struct.Fields}}
        &v.{{.Name}},
        {{- end}}
    )
	if err != nil {
		return nil, errorz.Wrap(err)
	}

	return &v, nil
}

func (s *{{.Ret.Type}}Scanner) MustNext() *{{.Ret.Type}} {
	v, err := s.Next()
	errorz.MaybeMustWrap(err)
	return v
}
{{end}}
{{end}}

{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if $.EmitMethodsWithDBArgument -}}
func (d *genDBImpl) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) ({{.Ret.DefineType}}, error) {
	row := db.QueryRow(ctx, {{.ConstantName}}, {{.Arg.Params}})
{{- else -}}
func (d *genDBImpl) {{.MethodName}}({{.Arg.Pair}}) ({{.Ret.DefineType}}, error) {
	return logm.Wrap1(d.ctx, fmt.Sprintf("dbm.%v", "{{.MethodName}}"), func (ctx context.Context) ({{.Ret.DefineType}}, error) {
        {{range .Arg.Pairs}}vldz.MustValidateStruct({{.Name}})
        {{end}}
        row := pgm.MustGet(ctx).QueryRow(fmt.Sprintf("db.%v", "{{.MethodName}}"), {{.ConstantName}}, {{.Arg.Params}})
{{- end}}
        {{- if or (ne .Arg.Pair .Ret.Pair) (ne .Arg.DefineType .Ret.DefineType) }}
        var {{.Ret.Name}} {{.Ret.Type}}
        {{- end}}
        err := row.Scan({{.Ret.Scan}})
        if err != nil {
            var z {{.Ret.DefineType}}
            if errors.Is(err, pgx.ErrNoRows) {
                return z, nil
            }
            return z, errorz.Wrap(err)
        }

        return {{.Ret.ReturnName}}, nil
    }{{range .Arg.Pairs}}, logm.BeginErrM({{if eq .Name "arg"}}logm.StandardKeyParams{{else}}"{{.Name}}"{{end}}, {{.Name}}){{ end }})
}
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if $.EmitMethodsWithDBArgument -}}
func (d *genDBImpl) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) ([]{{.Ret.DefineType}}, error) {
	rows, err := db.Query(ctx, {{.ConstantName}}, {{.Arg.Params}})
{{- else -}}
func (d *genDBImpl) {{.MethodName}}({{.Arg.Pair}}) ([]{{.Ret.DefineType}}, error) {
    return logm.Wrap1(d.ctx, fmt.Sprintf("dbm.%v", "{{.MethodName}}"), func (ctx context.Context) ([]{{.Ret.DefineType}}, error) {
        {{range .Arg.Pairs}}vldz.MustValidateStruct({{.Name}})
        {{end}}
    	rows, err := pgm.MustGet(d.ctx).Query(fmt.Sprintf("db.%v", "{{.MethodName}}"), {{.ConstantName}}, {{.Arg.Params}})
{{- end}}
        if err != nil {
            return nil, errorz.Wrap(err)
        }
        defer rows.Close()
        {{- if $.EmitEmptySlices}}
        items := []{{.Ret.DefineType}}{}
        {{else}}
        var items []{{.Ret.DefineType}}
        {{end -}}
        for rows.Next() {
            var {{.Ret.Name}} {{.Ret.Type}}
            if err := rows.Scan({{.Ret.Scan}}); err != nil {
                return nil, errorz.Wrap(err)
            }
            items = append(items, {{.Ret.ReturnName}})
        }
        if err := rows.Err(); err != nil {
            return nil, errorz.Wrap(err)
        }
        return items, nil
    }{{range .Arg.Pairs}}, logm.BeginErrM({{if eq .Name "arg"}}logm.StandardKeyParams{{else}}"{{.Name}}"{{end}}, {{.Name}}){{ end }})
}

{{if .Ret.IsStruct -}}
{{range .Comments}}//{{.}}
{{end -}}
func (d *genDBImpl) {{.MethodName}}Scanner({{.Arg.Pair}}) ({{.Ret.DefineType}}Scanner, error) {
    return logm.Wrap1(d.ctx, fmt.Sprintf("dbm.%v", "{{.MethodName}}Scanner"), func (ctx context.Context) ({{.Ret.DefineType}}Scanner, error) {
        {{range .Arg.Pairs}}vldz.MustValidateStruct({{.Name}})
        {{end}}
    	rows, err := pgm.MustGet(d.ctx).Query(fmt.Sprintf("db.%v", "{{.MethodName}}Scanner"), {{.ConstantName}}, {{.Arg.Params}})
        if err != nil {
            return nil, errorz.Wrap(err)
        }

    	return &{{.Ret.Type}}Scanner{
    	    rows: rows,
    	}, nil
    }{{range .Arg.Pairs}}, logm.BeginErrM({{if eq .Name "arg"}}logm.StandardKeyParams{{else}}"{{.Name}}"{{end}}, {{.Name}}){{ end }})
}
{{- end}}
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if $.EmitMethodsWithDBArgument -}}
func (d *genDBImpl) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) error {
	_, err := db.Exec(ctx, {{.ConstantName}}, {{.Arg.Params}})
{{- else -}}
func (d *genDBImpl) {{.MethodName}}({{.Arg.Pair}}) error {
    return logm.Wrap0(d.ctx, fmt.Sprintf("dbm.%v", "{{.MethodName}}"), func(ctx context.Context) error {
        {{range .Arg.Pairs}}vldz.MustValidateStruct({{.Name}})
        {{end}}
	    _, err := pgm.MustGet(ctx).Exec(fmt.Sprintf("db.%v", "{{.MethodName}}"), {{.ConstantName}}, {{.Arg.Params}})
{{- end}}
	    return errorz.MaybeWrap(err)
    }{{range .Arg.Pairs}}, logm.BeginErrM({{if eq .Name "arg"}}logm.StandardKeyParams{{else}}"{{.Name}}"{{end}}, {{.Name}}){{ end }})
}
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end -}}
{{if $.EmitMethodsWithDBArgument -}}
func (d *genDBImpl) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) (int64, error) {
	result, err := db.Exec(ctx, {{.ConstantName}}, {{.Arg.Params}})
{{- else -}}
func (d *genDBImpl) {{.MethodName}}({{.Arg.Pair}}) (int64, error) {
	return logm.Wrap1(d.ctx, fmt.Sprintf("dbm.%v", "{{.MethodName}}"), func (ctx context.Context) (int64, error) {
        {{range .Arg.Pairs}}vldz.MustValidateStruct({{.Name}})
        {{end}}
    	result, err := pgm.MustGet(d.ctx).Exec(fmt.Sprintf("db.%v", "{{.MethodName}}"), {{.ConstantName}}, {{.Arg.Params}})
{{- end}}
        if err != nil {
            return 0, errorz.Wrap(err)
        }
        return result.RowsAffected(), nil
    }{{range .Arg.Pairs}}, logm.BeginErrM({{if eq .Name "arg"}}logm.StandardKeyParams{{else}}"{{.Name}}"{{end}}, {{.Name}}){{ end }})
}
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if $.EmitMethodsWithDBArgument -}}
func (d *genDBImpl) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) (pgconn.CommandTag, error) {
	return db.Exec(ctx, {{.ConstantName}}, {{.Arg.Params}})
{{- else -}}
func (d *genDBImpl) {{.MethodName}}({{.Arg.Pair}}) (pgconn.CommandTag, error) {
	return logm.Wrap1(d.ctx, fmt.Sprintf("dbm.%v", "{{.MethodName}}"), func (ctx context.Context) (pgconn.CommandTag, error) {
        {{range .Arg.Pairs}}vldz.MustValidateStruct({{.Name}})
        {{end}}
    	tag, err := pgm.MustGet(d.ctx).Exec(fmt.Sprintf("db.%v", "{{.MethodName}}"), {{.ConstantName}}, {{.Arg.Params}})
{{- end}}
        return tag, errorz.MaybeWrap(err)
    }{{range .Arg.Pairs}}, logm.BeginErrM({{if eq .Name "arg"}}logm.StandardKeyParams{{else}}"{{.Name}}"{{end}}, {{.Name}}){{ end }})
}
{{end}}

{{end}}
{{end}}
{{end}}